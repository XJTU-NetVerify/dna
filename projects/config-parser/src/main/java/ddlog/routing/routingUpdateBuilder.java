// Automatically generated by the DDlog compiler.
package ddlog.routing;
import ddlogapi.DDlogAPI;
import ddlogapi.DDlogException;
import com.google.flatbuffers.*;
public class routingUpdateBuilder extends routingFlatBufferBuilder
{
    private java.util.Vector<Integer> commands;
    private boolean finished;
    public routingUpdateBuilder() {
        this.commands = new java.util.Vector<Integer>();
        this.finished = false;
    }
    public void applyUpdates(DDlogAPI hddlog)
        throws DDlogException {
        if (this.finished) {
            throw new IllegalStateException("applyUpdates() can only be invoked once for a routingUpdateBuilder instance.");
        }
        int[] cmds = new int[this.commands.size()];
        for(int i = 0; i < cmds.length; i++)
            cmds[i] = this.commands.get(i);
        int cmdvec = ddlog.__routing.__Commands.create__Commands(fbbuilder, ddlog.__routing.__Commands.createCommandsVector(fbbuilder,cmds));
        fbbuilder.finish(cmdvec);
        this.finished = true;
        hddlog.applyUpdatesFromFlatBuf(fbbuilder.dataBuffer());
    }
    public void insert_BgpAggregation(vnode_tWriter node, prefix_tWriter prefix)
    {
        int cmd = ddlog.__routing.__Command.create__Command(fbbuilder, (byte)0, 1, 7, ddlog.__routing.__Value.BgpAggregation, ddlog.__routing.BgpAggregation.createBgpAggregation(fbbuilder, node.offset, prefix.offset));
        this.commands.add(Integer.valueOf(cmd));
    }
    public void delete_BgpAggregation(vnode_tWriter node, prefix_tWriter prefix)
    {
        int cmd = ddlog.__routing.__Command.create__Command(fbbuilder, (byte)0, -1, 7, ddlog.__routing.__Value.BgpAggregation, ddlog.__routing.BgpAggregation.createBgpAggregation(fbbuilder, node.offset, prefix.offset));
        this.commands.add(Integer.valueOf(cmd));
    }
    
    public void insert_BgpMultipath(vnode_tWriter node, long k, boolean relax)
    {
        int cmd = ddlog.__routing.__Command.create__Command(fbbuilder, (byte)0, 1, 8, ddlog.__routing.__Value.BgpMultipath, ddlog.__routing.BgpMultipath.createBgpMultipath(fbbuilder, node.offset, k, relax));
        this.commands.add(Integer.valueOf(cmd));
    }
    public void delete_BgpMultipath(vnode_tWriter node, long k, boolean relax)
    {
        int cmd = ddlog.__routing.__Command.create__Command(fbbuilder, (byte)0, -1, 8, ddlog.__routing.__Value.BgpMultipath, ddlog.__routing.BgpMultipath.createBgpMultipath(fbbuilder, node.offset, k, relax));
        this.commands.add(Integer.valueOf(cmd));
    }
    
    public void insert_BgpNeighbor(vnode_tWriter node1, ip_tWriter ip1, vnode_tWriter node2, ip_tWriter ip2)
    {
        int cmd = ddlog.__routing.__Command.create__Command(fbbuilder, (byte)0, 1, 10, ddlog.__routing.__Value.BgpNeighbor, ddlog.__routing.BgpNeighbor.createBgpNeighbor(fbbuilder, node1.offset, ip1.offset, node2.offset, ip2.offset));
        this.commands.add(Integer.valueOf(cmd));
    }
    public void delete_BgpNeighbor(vnode_tWriter node1, ip_tWriter ip1, vnode_tWriter node2, ip_tWriter ip2)
    {
        int cmd = ddlog.__routing.__Command.create__Command(fbbuilder, (byte)0, -1, 10, ddlog.__routing.__Value.BgpNeighbor, ddlog.__routing.BgpNeighbor.createBgpNeighbor(fbbuilder, node1.offset, ip1.offset, node2.offset, ip2.offset));
        this.commands.add(Integer.valueOf(cmd));
    }
    
    public void insert_BgpNetwork(vnode_tWriter node, prefix_tWriter prefix)
    {
        int cmd = ddlog.__routing.__Command.create__Command(fbbuilder, (byte)0, 1, 11, ddlog.__routing.__Value.BgpNetwork, ddlog.__routing.BgpNetwork.createBgpNetwork(fbbuilder, node.offset, prefix.offset));
        this.commands.add(Integer.valueOf(cmd));
    }
    public void delete_BgpNetwork(vnode_tWriter node, prefix_tWriter prefix)
    {
        int cmd = ddlog.__routing.__Command.create__Command(fbbuilder, (byte)0, -1, 11, ddlog.__routing.__Value.BgpNetwork, ddlog.__routing.BgpNetwork.createBgpNetwork(fbbuilder, node.offset, prefix.offset));
        this.commands.add(Integer.valueOf(cmd));
    }
    
    public void insert_BgpRedis(vnode_tWriter node, String protocol)
    {
        int cmd = ddlog.__routing.__Command.create__Command(fbbuilder, (byte)0, 1, 12, ddlog.__routing.__Value.BgpRedis, ddlog.__routing.BgpRedis.createBgpRedis(fbbuilder, node.offset, fbbuilder.createString(protocol)));
        this.commands.add(Integer.valueOf(cmd));
    }
    public void delete_BgpRedis(vnode_tWriter node, String protocol)
    {
        int cmd = ddlog.__routing.__Command.create__Command(fbbuilder, (byte)0, -1, 12, ddlog.__routing.__Value.BgpRedis, ddlog.__routing.BgpRedis.createBgpRedis(fbbuilder, node.offset, fbbuilder.createString(protocol)));
        this.commands.add(Integer.valueOf(cmd));
    }
    
    public void insert_BgpReflectClient(vnode_tWriter node1, ip_tWriter ip1, vnode_tWriter node2, ip_tWriter ip2)
    {
        int cmd = ddlog.__routing.__Command.create__Command(fbbuilder, (byte)0, 1, 13, ddlog.__routing.__Value.BgpReflectClient, ddlog.__routing.BgpReflectClient.createBgpReflectClient(fbbuilder, node1.offset, ip1.offset, node2.offset, ip2.offset));
        this.commands.add(Integer.valueOf(cmd));
    }
    public void delete_BgpReflectClient(vnode_tWriter node1, ip_tWriter ip1, vnode_tWriter node2, ip_tWriter ip2)
    {
        int cmd = ddlog.__routing.__Command.create__Command(fbbuilder, (byte)0, -1, 13, ddlog.__routing.__Value.BgpReflectClient, ddlog.__routing.BgpReflectClient.createBgpReflectClient(fbbuilder, node1.offset, ip1.offset, node2.offset, ip2.offset));
        this.commands.add(Integer.valueOf(cmd));
    }
    
    public void insert_IBgpNeighbor(vnode_tWriter node1, ip_tWriter ip1, vnode_tWriter node2, ip_tWriter ip2)
    {
        int cmd = ddlog.__routing.__Command.create__Command(fbbuilder, (byte)0, 1, 18, ddlog.__routing.__Value.IBgpNeighbor, ddlog.__routing.IBgpNeighbor.createIBgpNeighbor(fbbuilder, node1.offset, ip1.offset, node2.offset, ip2.offset));
        this.commands.add(Integer.valueOf(cmd));
    }
    public void delete_IBgpNeighbor(vnode_tWriter node1, ip_tWriter ip1, vnode_tWriter node2, ip_tWriter ip2)
    {
        int cmd = ddlog.__routing.__Command.create__Command(fbbuilder, (byte)0, -1, 18, ddlog.__routing.__Value.IBgpNeighbor, ddlog.__routing.IBgpNeighbor.createIBgpNeighbor(fbbuilder, node1.offset, ip1.offset, node2.offset, ip2.offset));
        this.commands.add(Integer.valueOf(cmd));
    }
    
    public void insert_Interface(vnode_tWriter node, String intf, prefix_tWriter prefix)
    {
        int cmd = ddlog.__routing.__Command.create__Command(fbbuilder, (byte)0, 1, 19, ddlog.__routing.__Value.Interface, ddlog.__routing.Interface.createInterface(fbbuilder, node.offset, fbbuilder.createString(intf), prefix.offset));
        this.commands.add(Integer.valueOf(cmd));
    }
    public void delete_Interface(vnode_tWriter node, String intf, prefix_tWriter prefix)
    {
        int cmd = ddlog.__routing.__Command.create__Command(fbbuilder, (byte)0, -1, 19, ddlog.__routing.__Value.Interface, ddlog.__routing.Interface.createInterface(fbbuilder, node.offset, fbbuilder.createString(intf), prefix.offset));
        this.commands.add(Integer.valueOf(cmd));
    }
    
    public void insert_L3Link(String node1, String int1, String node2, String int2)
    {
        int cmd = ddlog.__routing.__Command.create__Command(fbbuilder, (byte)0, 1, 21, ddlog.__routing.__Value.L3Link, ddlog.__routing.L3Link.createL3Link(fbbuilder, fbbuilder.createString(node1), fbbuilder.createString(int1), fbbuilder.createString(node2), fbbuilder.createString(int2)));
        this.commands.add(Integer.valueOf(cmd));
    }
    public void delete_L3Link(String node1, String int1, String node2, String int2)
    {
        int cmd = ddlog.__routing.__Command.create__Command(fbbuilder, (byte)0, -1, 21, ddlog.__routing.__Value.L3Link, ddlog.__routing.L3Link.createL3Link(fbbuilder, fbbuilder.createString(node1), fbbuilder.createString(int1), fbbuilder.createString(node2), fbbuilder.createString(int2)));
        this.commands.add(Integer.valueOf(cmd));
    }
    
    public void insert_Node(vnode_tWriter node, long as_, long id)
    {
        int cmd = ddlog.__routing.__Command.create__Command(fbbuilder, (byte)0, 1, 28, ddlog.__routing.__Value.Node, ddlog.__routing.Node.createNode(fbbuilder, node.offset, as_, id));
        this.commands.add(Integer.valueOf(cmd));
    }
    public void delete_Node(vnode_tWriter node, long as_, long id)
    {
        int cmd = ddlog.__routing.__Command.create__Command(fbbuilder, (byte)0, -1, 28, ddlog.__routing.__Value.Node, ddlog.__routing.Node.createNode(fbbuilder, node.offset, as_, id));
        this.commands.add(Integer.valueOf(cmd));
    }
    
    public void insert_OspfIntfSetting(vnode_tWriter node, String intf, long cost, long area, boolean passive, long process)
    {
        int cmd = ddlog.__routing.__Command.create__Command(fbbuilder, (byte)0, 1, 30, ddlog.__routing.__Value.OspfIntfSetting, ddlog.__routing.OspfIntfSetting.createOspfIntfSetting(fbbuilder, node.offset, fbbuilder.createString(intf), cost, area, passive, process));
        this.commands.add(Integer.valueOf(cmd));
    }
    public void delete_OspfIntfSetting(vnode_tWriter node, String intf, long cost, long area, boolean passive, long process)
    {
        int cmd = ddlog.__routing.__Command.create__Command(fbbuilder, (byte)0, -1, 30, ddlog.__routing.__Value.OspfIntfSetting, ddlog.__routing.OspfIntfSetting.createOspfIntfSetting(fbbuilder, node.offset, fbbuilder.createString(intf), cost, area, passive, process));
        this.commands.add(Integer.valueOf(cmd));
    }
    
    public void insert_OspfMultipath(vnode_tWriter node, long k, long process)
    {
        int cmd = ddlog.__routing.__Command.create__Command(fbbuilder, (byte)0, 1, 31, ddlog.__routing.__Value.OspfMultipath, ddlog.__routing.OspfMultipath.createOspfMultipath(fbbuilder, node.offset, k, process));
        this.commands.add(Integer.valueOf(cmd));
    }
    public void delete_OspfMultipath(vnode_tWriter node, long k, long process)
    {
        int cmd = ddlog.__routing.__Command.create__Command(fbbuilder, (byte)0, -1, 31, ddlog.__routing.__Value.OspfMultipath, ddlog.__routing.OspfMultipath.createOspfMultipath(fbbuilder, node.offset, k, process));
        this.commands.add(Integer.valueOf(cmd));
    }
    
    public void insert_OspfRedis(vnode_tWriter node, String protocol, long process)
    {
        int cmd = ddlog.__routing.__Command.create__Command(fbbuilder, (byte)0, 1, 34, ddlog.__routing.__Value.OspfRedis, ddlog.__routing.OspfRedis.createOspfRedis(fbbuilder, node.offset, fbbuilder.createString(protocol), process));
        this.commands.add(Integer.valueOf(cmd));
    }
    public void delete_OspfRedis(vnode_tWriter node, String protocol, long process)
    {
        int cmd = ddlog.__routing.__Command.create__Command(fbbuilder, (byte)0, -1, 34, ddlog.__routing.__Value.OspfRedis, ddlog.__routing.OspfRedis.createOspfRedis(fbbuilder, node.offset, fbbuilder.createString(protocol), process));
        this.commands.add(Integer.valueOf(cmd));
    }
    
    public void insert_OspfStubArea(vnode_tWriter node, long process, long area, boolean no_summary, boolean default_originate, boolean no_redis, long metric)
    {
        int cmd = ddlog.__routing.__Command.create__Command(fbbuilder, (byte)0, 1, 37, ddlog.__routing.__Value.OspfStubArea, ddlog.__routing.OspfStubArea.createOspfStubArea(fbbuilder, node.offset, process, area, no_summary, default_originate, no_redis, metric));
        this.commands.add(Integer.valueOf(cmd));
    }
    public void delete_OspfStubArea(vnode_tWriter node, long process, long area, boolean no_summary, boolean default_originate, boolean no_redis, long metric)
    {
        int cmd = ddlog.__routing.__Command.create__Command(fbbuilder, (byte)0, -1, 37, ddlog.__routing.__Value.OspfStubArea, ddlog.__routing.OspfStubArea.createOspfStubArea(fbbuilder, node.offset, process, area, no_summary, default_originate, no_redis, metric));
        this.commands.add(Integer.valueOf(cmd));
    }
    
    public void insert_RouteMapIn(vnode_tWriter node, vnode_tWriter from_node, java.util.List<route_map_tWriter> policy)
    {
        int cmd = ddlog.__routing.__Command.create__Command(fbbuilder, (byte)0, 1, 38, ddlog.__routing.__Value.RouteMapIn, ddlog.__routing.RouteMapIn.createRouteMapIn(fbbuilder, node.offset, from_node.offset, ddlog.__routing.RouteMapIn.createPolicyVector(fbbuilder,routingFlatBufferBuilder.create_ddlog_std_Vec_route_map_t_(fbbuilder, policy))));
        this.commands.add(Integer.valueOf(cmd));
    }
    public void delete_RouteMapIn(vnode_tWriter node, vnode_tWriter from_node, java.util.List<route_map_tWriter> policy)
    {
        int cmd = ddlog.__routing.__Command.create__Command(fbbuilder, (byte)0, -1, 38, ddlog.__routing.__Value.RouteMapIn, ddlog.__routing.RouteMapIn.createRouteMapIn(fbbuilder, node.offset, from_node.offset, ddlog.__routing.RouteMapIn.createPolicyVector(fbbuilder,routingFlatBufferBuilder.create_ddlog_std_Vec_route_map_t_(fbbuilder, policy))));
        this.commands.add(Integer.valueOf(cmd));
    }
    
    public void insert_RouteMapOut(vnode_tWriter node, vnode_tWriter to_node, java.util.List<route_map_tWriter> policy)
    {
        int cmd = ddlog.__routing.__Command.create__Command(fbbuilder, (byte)0, 1, 39, ddlog.__routing.__Value.RouteMapOut, ddlog.__routing.RouteMapOut.createRouteMapOut(fbbuilder, node.offset, to_node.offset, ddlog.__routing.RouteMapOut.createPolicyVector(fbbuilder,routingFlatBufferBuilder.create_ddlog_std_Vec_route_map_t_(fbbuilder, policy))));
        this.commands.add(Integer.valueOf(cmd));
    }
    public void delete_RouteMapOut(vnode_tWriter node, vnode_tWriter to_node, java.util.List<route_map_tWriter> policy)
    {
        int cmd = ddlog.__routing.__Command.create__Command(fbbuilder, (byte)0, -1, 39, ddlog.__routing.__Value.RouteMapOut, ddlog.__routing.RouteMapOut.createRouteMapOut(fbbuilder, node.offset, to_node.offset, ddlog.__routing.RouteMapOut.createPolicyVector(fbbuilder,routingFlatBufferBuilder.create_ddlog_std_Vec_route_map_t_(fbbuilder, policy))));
        this.commands.add(Integer.valueOf(cmd));
    }
    
    public void insert_StaticRoute(vnode_tWriter node, prefix_tWriter prefix, ip_tWriter next_hop_ip, long adminCost)
    {
        int cmd = ddlog.__routing.__Command.create__Command(fbbuilder, (byte)0, 1, 41, ddlog.__routing.__Value.StaticRoute, ddlog.__routing.StaticRoute.createStaticRoute(fbbuilder, node.offset, prefix.offset, next_hop_ip.offset, adminCost));
        this.commands.add(Integer.valueOf(cmd));
    }
    public void delete_StaticRoute(vnode_tWriter node, prefix_tWriter prefix, ip_tWriter next_hop_ip, long adminCost)
    {
        int cmd = ddlog.__routing.__Command.create__Command(fbbuilder, (byte)0, -1, 41, ddlog.__routing.__Value.StaticRoute, ddlog.__routing.StaticRoute.createStaticRoute(fbbuilder, node.offset, prefix.offset, next_hop_ip.offset, adminCost));
        this.commands.add(Integer.valueOf(cmd));
    }
    
}