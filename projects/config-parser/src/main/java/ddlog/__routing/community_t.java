// automatically generated by the FlatBuffers compiler, do not modify

package ddlog.__routing;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class community_t extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_2_0_0(); }
  public static community_t getRootAscommunity_t(ByteBuffer _bb) { return getRootAscommunity_t(_bb, new community_t()); }
  public static community_t getRootAscommunity_t(ByteBuffer _bb, community_t obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public community_t __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public String as_() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer as_AsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer as_InByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  public String tag() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer tagAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer tagInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }

  public static int createcommunity_t(FlatBufferBuilder builder,
      int as_Offset,
      int tagOffset) {
    builder.startTable(2);
    community_t.addTag(builder, tagOffset);
    community_t.addAs_(builder, as_Offset);
    return community_t.endcommunity_t(builder);
  }

  public static void startcommunity_t(FlatBufferBuilder builder) { builder.startTable(2); }
  public static void addAs_(FlatBufferBuilder builder, int as_Offset) { builder.addOffset(0, as_Offset, 0); }
  public static void addTag(FlatBufferBuilder builder, int tagOffset) { builder.addOffset(1, tagOffset, 0); }
  public static int endcommunity_t(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public community_t get(int j) { return get(new community_t(), j); }
    public community_t get(community_t obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

