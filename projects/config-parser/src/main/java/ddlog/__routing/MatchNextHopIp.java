// automatically generated by the FlatBuffers compiler, do not modify

package ddlog.__routing;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class MatchNextHopIp extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_2_0_0(); }
  public static MatchNextHopIp getRootAsMatchNextHopIp(ByteBuffer _bb) { return getRootAsMatchNextHopIp(_bb, new MatchNextHopIp()); }
  public static MatchNextHopIp getRootAsMatchNextHopIp(ByteBuffer _bb, MatchNextHopIp obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public MatchNextHopIp __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public ddlog.__routing.ip_t nextHopIp() { return nextHopIp(new ddlog.__routing.ip_t()); }
  public ddlog.__routing.ip_t nextHopIp(ddlog.__routing.ip_t obj) { int o = __offset(4); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }

  public static int createMatchNextHopIp(FlatBufferBuilder builder,
      int next_hop_ipOffset) {
    builder.startTable(1);
    MatchNextHopIp.addNextHopIp(builder, next_hop_ipOffset);
    return MatchNextHopIp.endMatchNextHopIp(builder);
  }

  public static void startMatchNextHopIp(FlatBufferBuilder builder) { builder.startTable(1); }
  public static void addNextHopIp(FlatBufferBuilder builder, int nextHopIpOffset) { builder.addOffset(0, nextHopIpOffset, 0); }
  public static int endMatchNextHopIp(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public MatchNextHopIp get(int j) { return get(new MatchNextHopIp(), j); }
    public MatchNextHopIp get(MatchNextHopIp obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

