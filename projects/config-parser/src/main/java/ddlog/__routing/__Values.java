// automatically generated by the FlatBuffers compiler, do not modify

package ddlog.__routing;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class __Values extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_2_0_0(); }
  public static __Values getRootAs__Values(ByteBuffer _bb) { return getRootAs__Values(_bb, new __Values()); }
  public static __Values getRootAs__Values(ByteBuffer _bb, __Values obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public __Values __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public ddlog.__routing.__ValueTable values(int j) { return values(new ddlog.__routing.__ValueTable(), j); }
  public ddlog.__routing.__ValueTable values(ddlog.__routing.__ValueTable obj, int j) { int o = __offset(4); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int valuesLength() { int o = __offset(4); return o != 0 ? __vector_len(o) : 0; }
  public ddlog.__routing.__ValueTable.Vector valuesVector() { return valuesVector(new ddlog.__routing.__ValueTable.Vector()); }
  public ddlog.__routing.__ValueTable.Vector valuesVector(ddlog.__routing.__ValueTable.Vector obj) { int o = __offset(4); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }

  public static int create__Values(FlatBufferBuilder builder,
      int valuesOffset) {
    builder.startTable(1);
    __Values.addValues(builder, valuesOffset);
    return __Values.end__Values(builder);
  }

  public static void start__Values(FlatBufferBuilder builder) { builder.startTable(1); }
  public static void addValues(FlatBufferBuilder builder, int valuesOffset) { builder.addOffset(0, valuesOffset, 0); }
  public static int createValuesVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startValuesVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static int end__Values(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public __Values get(int j) { return get(new __Values(), j); }
    public __Values get(__Values obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

