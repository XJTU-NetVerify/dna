// automatically generated by the FlatBuffers compiler, do not modify

package ddlog.__routing;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class OspfIntfSetting extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_2_0_0(); }
  public static OspfIntfSetting getRootAsOspfIntfSetting(ByteBuffer _bb) { return getRootAsOspfIntfSetting(_bb, new OspfIntfSetting()); }
  public static OspfIntfSetting getRootAsOspfIntfSetting(ByteBuffer _bb, OspfIntfSetting obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public OspfIntfSetting __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public ddlog.__routing.vnode_t node() { return node(new ddlog.__routing.vnode_t()); }
  public ddlog.__routing.vnode_t node(ddlog.__routing.vnode_t obj) { int o = __offset(4); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }
  public String intf() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer intfAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer intfInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  public long cost() { int o = __offset(8); return o != 0 ? bb.getLong(o + bb_pos) : 0L; }
  public long area() { int o = __offset(10); return o != 0 ? bb.getLong(o + bb_pos) : 0L; }
  public boolean passive() { int o = __offset(12); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  public long process() { int o = __offset(14); return o != 0 ? bb.getLong(o + bb_pos) : 0L; }

  public static int createOspfIntfSetting(FlatBufferBuilder builder,
      int nodeOffset,
      int intfOffset,
      long cost,
      long area,
      boolean passive,
      long process) {
    builder.startTable(6);
    OspfIntfSetting.addProcess(builder, process);
    OspfIntfSetting.addArea(builder, area);
    OspfIntfSetting.addCost(builder, cost);
    OspfIntfSetting.addIntf(builder, intfOffset);
    OspfIntfSetting.addNode(builder, nodeOffset);
    OspfIntfSetting.addPassive(builder, passive);
    return OspfIntfSetting.endOspfIntfSetting(builder);
  }

  public static void startOspfIntfSetting(FlatBufferBuilder builder) { builder.startTable(6); }
  public static void addNode(FlatBufferBuilder builder, int nodeOffset) { builder.addOffset(0, nodeOffset, 0); }
  public static void addIntf(FlatBufferBuilder builder, int intfOffset) { builder.addOffset(1, intfOffset, 0); }
  public static void addCost(FlatBufferBuilder builder, long cost) { builder.addLong(2, cost, 0L); }
  public static void addArea(FlatBufferBuilder builder, long area) { builder.addLong(3, area, 0L); }
  public static void addPassive(FlatBufferBuilder builder, boolean passive) { builder.addBoolean(4, passive, false); }
  public static void addProcess(FlatBufferBuilder builder, long process) { builder.addLong(5, process, 0L); }
  public static int endOspfIntfSetting(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public OspfIntfSetting get(int j) { return get(new OspfIntfSetting(), j); }
    public OspfIntfSetting get(OspfIntfSetting obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

