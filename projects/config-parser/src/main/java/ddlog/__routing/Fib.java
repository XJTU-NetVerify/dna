// automatically generated by the FlatBuffers compiler, do not modify

package ddlog.__routing;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class Fib extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_2_0_0(); }
  public static Fib getRootAsFib(ByteBuffer _bb) { return getRootAsFib(_bb, new Fib()); }
  public static Fib getRootAsFib(ByteBuffer _bb, Fib obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public Fib __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public String node() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer nodeAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer nodeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  public String prefix() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer prefixAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer prefixInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  public String intf() { int o = __offset(8); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer intfAsByteBuffer() { return __vector_as_bytebuffer(8, 1); }
  public ByteBuffer intfInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 8, 1); }
  public String nextHopIp() { int o = __offset(10); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer nextHopIpAsByteBuffer() { return __vector_as_bytebuffer(10, 1); }
  public ByteBuffer nextHopIpInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 10, 1); }

  public static int createFib(FlatBufferBuilder builder,
      int nodeOffset,
      int prefixOffset,
      int intfOffset,
      int next_hop_ipOffset) {
    builder.startTable(4);
    Fib.addNextHopIp(builder, next_hop_ipOffset);
    Fib.addIntf(builder, intfOffset);
    Fib.addPrefix(builder, prefixOffset);
    Fib.addNode(builder, nodeOffset);
    return Fib.endFib(builder);
  }

  public static void startFib(FlatBufferBuilder builder) { builder.startTable(4); }
  public static void addNode(FlatBufferBuilder builder, int nodeOffset) { builder.addOffset(0, nodeOffset, 0); }
  public static void addPrefix(FlatBufferBuilder builder, int prefixOffset) { builder.addOffset(1, prefixOffset, 0); }
  public static void addIntf(FlatBufferBuilder builder, int intfOffset) { builder.addOffset(2, intfOffset, 0); }
  public static void addNextHopIp(FlatBufferBuilder builder, int nextHopIpOffset) { builder.addOffset(3, nextHopIpOffset, 0); }
  public static int endFib(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public Fib get(int j) { return get(new Fib(), j); }
    public Fib get(Fib obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

