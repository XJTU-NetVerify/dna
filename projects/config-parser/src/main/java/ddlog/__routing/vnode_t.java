// automatically generated by the FlatBuffers compiler, do not modify

package ddlog.__routing;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class vnode_t extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_2_0_0(); }
  public static vnode_t getRootAsvnode_t(ByteBuffer _bb) { return getRootAsvnode_t(_bb, new vnode_t()); }
  public static vnode_t getRootAsvnode_t(ByteBuffer _bb, vnode_t obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public vnode_t __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public String device() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer deviceAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer deviceInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  public String vrf() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer vrfAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer vrfInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }

  public static int createvnode_t(FlatBufferBuilder builder,
      int deviceOffset,
      int vrfOffset) {
    builder.startTable(2);
    vnode_t.addVrf(builder, vrfOffset);
    vnode_t.addDevice(builder, deviceOffset);
    return vnode_t.endvnode_t(builder);
  }

  public static void startvnode_t(FlatBufferBuilder builder) { builder.startTable(2); }
  public static void addDevice(FlatBufferBuilder builder, int deviceOffset) { builder.addOffset(0, deviceOffset, 0); }
  public static void addVrf(FlatBufferBuilder builder, int vrfOffset) { builder.addOffset(1, vrfOffset, 0); }
  public static int endvnode_t(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public vnode_t get(int j) { return get(new vnode_t(), j); }
    public vnode_t get(vnode_t obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

