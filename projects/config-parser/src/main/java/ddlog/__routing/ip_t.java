// automatically generated by the FlatBuffers compiler, do not modify

package ddlog.__routing;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class ip_t extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_2_0_0(); }
  public static ip_t getRootAsip_t(ByteBuffer _bb) { return getRootAsip_t(_bb, new ip_t()); }
  public static ip_t getRootAsip_t(ByteBuffer _bb, ip_t obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public ip_t __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int b3() { int o = __offset(4); return o != 0 ? bb.get(o + bb_pos) & 0xFF : 0; }
  public int b2() { int o = __offset(6); return o != 0 ? bb.get(o + bb_pos) & 0xFF : 0; }
  public int b1() { int o = __offset(8); return o != 0 ? bb.get(o + bb_pos) & 0xFF : 0; }
  public int b0() { int o = __offset(10); return o != 0 ? bb.get(o + bb_pos) & 0xFF : 0; }

  public static int createip_t(FlatBufferBuilder builder,
      int b3,
      int b2,
      int b1,
      int b0) {
    builder.startTable(4);
    ip_t.addB0(builder, b0);
    ip_t.addB1(builder, b1);
    ip_t.addB2(builder, b2);
    ip_t.addB3(builder, b3);
    return ip_t.endip_t(builder);
  }

  public static void startip_t(FlatBufferBuilder builder) { builder.startTable(4); }
  public static void addB3(FlatBufferBuilder builder, int b3) { builder.addByte(0, (byte)b3, (byte)0); }
  public static void addB2(FlatBufferBuilder builder, int b2) { builder.addByte(1, (byte)b2, (byte)0); }
  public static void addB1(FlatBufferBuilder builder, int b1) { builder.addByte(2, (byte)b1, (byte)0); }
  public static void addB0(FlatBufferBuilder builder, int b0) { builder.addByte(3, (byte)b0, (byte)0); }
  public static int endip_t(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public ip_t get(int j) { return get(new ip_t(), j); }
    public ip_t get(ip_t obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

