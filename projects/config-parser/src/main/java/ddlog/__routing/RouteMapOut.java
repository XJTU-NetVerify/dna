// automatically generated by the FlatBuffers compiler, do not modify

package ddlog.__routing;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class RouteMapOut extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_2_0_0(); }
  public static RouteMapOut getRootAsRouteMapOut(ByteBuffer _bb) { return getRootAsRouteMapOut(_bb, new RouteMapOut()); }
  public static RouteMapOut getRootAsRouteMapOut(ByteBuffer _bb, RouteMapOut obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public RouteMapOut __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public ddlog.__routing.vnode_t node() { return node(new ddlog.__routing.vnode_t()); }
  public ddlog.__routing.vnode_t node(ddlog.__routing.vnode_t obj) { int o = __offset(4); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }
  public ddlog.__routing.vnode_t toNode() { return toNode(new ddlog.__routing.vnode_t()); }
  public ddlog.__routing.vnode_t toNode(ddlog.__routing.vnode_t obj) { int o = __offset(6); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }
  public ddlog.__routing.route_map_t policy(int j) { return policy(new ddlog.__routing.route_map_t(), j); }
  public ddlog.__routing.route_map_t policy(ddlog.__routing.route_map_t obj, int j) { int o = __offset(8); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int policyLength() { int o = __offset(8); return o != 0 ? __vector_len(o) : 0; }
  public ddlog.__routing.route_map_t.Vector policyVector() { return policyVector(new ddlog.__routing.route_map_t.Vector()); }
  public ddlog.__routing.route_map_t.Vector policyVector(ddlog.__routing.route_map_t.Vector obj) { int o = __offset(8); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }

  public static int createRouteMapOut(FlatBufferBuilder builder,
      int nodeOffset,
      int to_nodeOffset,
      int policyOffset) {
    builder.startTable(3);
    RouteMapOut.addPolicy(builder, policyOffset);
    RouteMapOut.addToNode(builder, to_nodeOffset);
    RouteMapOut.addNode(builder, nodeOffset);
    return RouteMapOut.endRouteMapOut(builder);
  }

  public static void startRouteMapOut(FlatBufferBuilder builder) { builder.startTable(3); }
  public static void addNode(FlatBufferBuilder builder, int nodeOffset) { builder.addOffset(0, nodeOffset, 0); }
  public static void addToNode(FlatBufferBuilder builder, int toNodeOffset) { builder.addOffset(1, toNodeOffset, 0); }
  public static void addPolicy(FlatBufferBuilder builder, int policyOffset) { builder.addOffset(2, policyOffset, 0); }
  public static int createPolicyVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startPolicyVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static int endRouteMapOut(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public RouteMapOut get(int j) { return get(new RouteMapOut(), j); }
    public RouteMapOut get(RouteMapOut obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

